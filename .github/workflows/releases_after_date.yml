name: Track Releases After Jan2024

on:
  schedule:
    # This runs every hour; modify the cron schedule as needed.
    - cron: '0 * * * *'
  workflow_dispatch:  # Allows manual triggering

jobs:
  track_releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch and Log Releases After Jan 2024
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define the target date (ISO 8601 format). Only releases with published_at > this date will be included.
          target_date="2024-01-01T00:00:00Z"
          
          # List your repositories in "owner/repo" format.
          repos=("owner1/repo1" "owner2/repo2" "owner3/repo3")
          
          # Define the output file for the report.
          output_file="releases_after_jan2024.txt"
          echo "Release tracking report (Releases with published_at > Jan 1, 2024) - $(date)" > $output_file
          
          # Iterate over each repository.
          for repo in "${repos[@]}"; do
            echo "Checking releases for $repo..."
            
            # Get all releases for the repository.
            response=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "https://api.github.com/repos/$repo/releases")
            
            # Check if the response is valid JSON.
            if ! echo "$response" | jq . >/dev/null 2>&1; then
              echo "$repo: Invalid JSON response: $response" >> $output_file
              continue
            fi

            # Check if the JSON is an array (the expected result) or an object (error message).
            response_type=$(echo "$response" | jq -r 'type')
            if [ "$response_type" != "array" ]; then
              echo "$repo: Unexpected JSON type ($response_type). Response: $response" >> $output_file
              continue
            fi
          
            # Filter releases with published_at greater than the target_date.
            filtered=$(echo "$response" | jq --arg date "$target_date" '[.[] | select(.published_at > $date)]')
            
            # Count the number of filtered releases.
            count=$(echo "$filtered" | jq 'length')
            if [ "$count" -gt 0 ]; then
              echo "$repo:" >> $output_file
              # Log details of each filtered release.
              echo "$filtered" | jq -c '.[]' | while read -r release; do
                tag=$(echo "$release" | jq -r .tag_name)
                published_at=$(echo "$release" | jq -r .published_at)
                echo "  - Release '$tag' published at $published_at" >> $output_file
              done
            else
              echo "$repo: No releases found with published_at > Jan 1, 2024." >> $output_file
            fi
          done
          
          # Output the report to the workflow log.
          cat $output_file
